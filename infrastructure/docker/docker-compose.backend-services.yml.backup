# Docker Compose for Trade2026 Backend Services
# 8 Python Flask microservices with unified data fetcher
# All services are INTERNAL-ONLY (no exposed ports)
# Access via API Gateway at http://localhost/api/*

version: '3.8'

networks:
  backend:
    name: trade2026-backend
    external: true
  lowlatency:
    name: trade2026-lowlatency
    external: true

services:
  # =========================================================================
  # Portfolio Optimization Service (Internal Port 5000)
  # =========================================================================
  portfolio-optimizer:
    build:
      context: ../../backend
      dockerfile: Dockerfile.backend-service
      args:
        SERVICE_NAME: portfolio_optimizer
    container_name: portfolio-optimizer
    hostname: portfolio-optimizer
    networks:
      - backend
      - lowlatency
    environment:
      - SERVICE_NAME=Portfolio Optimizer
      - SERVICE_PORT=5000
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =========================================================================
  # RL Trading Service (Port 5002)
  # =========================================================================
  rl-trading:
    build:
      context: ../../backend
      dockerfile: Dockerfile.backend-service
      args:
        SERVICE_NAME: rl_trading
    container_name: rl-trading
    hostname: rl-trading
    ports:
      - "5002:5000"
    networks:
      - backend
      - lowlatency
    environment:
      - SERVICE_NAME=RL Trading
      - SERVICE_PORT=5000
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5002/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =========================================================================
  # Advanced Backtest Service (Port 5003)
  # =========================================================================
  advanced-backtest:
    build:
      context: ../../backend
      dockerfile: Dockerfile.backend-service
      args:
        SERVICE_NAME: advanced_backtest
    container_name: advanced-backtest
    hostname: advanced-backtest
    ports:
      - "5003:5000"
    networks:
      - backend
      - lowlatency
    environment:
      - SERVICE_NAME=Advanced Backtest
      - SERVICE_PORT=5000
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5003/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =========================================================================
  # Factor Models Service (Port 5004)
  # =========================================================================
  factor-models:
    build:
      context: ../../backend
      dockerfile: Dockerfile.backend-service
      args:
        SERVICE_NAME: factor_models
    container_name: factor-models
    hostname: factor-models
    ports:
      - "5004:5000"
    networks:
      - backend
      - lowlatency
    environment:
      - SERVICE_NAME=Factor Models
      - SERVICE_PORT=5000
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5004/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =========================================================================
  # Simulation Engine Service (Port 5005)
  # =========================================================================
  simulation-engine:
    build:
      context: ../../backend
      dockerfile: Dockerfile.backend-service
      args:
        SERVICE_NAME: simulation_engine
    container_name: simulation-engine
    hostname: simulation-engine
    ports:
      - "5005:5000"
    networks:
      - backend
      - lowlatency
    environment:
      - SERVICE_NAME=Simulation Engine
      - SERVICE_PORT=5000
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5005/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =========================================================================
  # Fractional Differentiation Service (Port 5006)
  # =========================================================================
  fractional-diff:
    build:
      context: ../../backend
      dockerfile: Dockerfile.backend-service
      args:
        SERVICE_NAME: fractional_diff
    container_name: fractional-diff
    hostname: fractional-diff
    ports:
      - "5006:5000"
    networks:
      - backend
      - lowlatency
    environment:
      - SERVICE_NAME=Fractional Differentiation
      - SERVICE_PORT=5000
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5006/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =========================================================================
  # Meta-Labeling Service (Port 5007)
  # =========================================================================
  meta-labeling:
    build:
      context: ../../backend
      dockerfile: Dockerfile.backend-service
      args:
        SERVICE_NAME: meta_labeling
    container_name: meta-labeling
    hostname: meta-labeling
    ports:
      - "5007:5000"
    networks:
      - backend
      - lowlatency
    environment:
      - SERVICE_NAME=Meta-Labeling
      - SERVICE_PORT=5000
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5007/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =========================================================================
  # Stock Screener Service (Port 5008)
  # =========================================================================
  stock-screener:
    build:
      context: ../../backend
      dockerfile: Dockerfile.backend-service
      args:
        SERVICE_NAME: stock_screener
    container_name: stock-screener
    hostname: stock-screener
    ports:
      - "5008:5000"
    networks:
      - backend
      - lowlatency
    environment:
      - SERVICE_NAME=Stock Screener
      - SERVICE_PORT=5000
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5008/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

