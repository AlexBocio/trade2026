# Traefik Dynamic Configuration - TLS
# Phase 15.6: CPGS v1.0 - TLS certificates and options

tls:
  # ========================================
  # TLS Certificates
  # ========================================
  certificates:
    # Development: Self-signed wildcard certificate
    - certFile: /etc/traefik/certs/dev-wildcard.crt
      keyFile: /etc/traefik/certs/dev-wildcard.key
      stores:
        - default

    # Production: Let's Encrypt or custom CA
    # - certFile: /etc/traefik/certs/trade2026.crt
    #   keyFile: /etc/traefik/certs/trade2026.key
    #   stores:
    #     - default

  # ========================================
  # Certificate Stores
  # ========================================
  stores:
    default:
      defaultCertificate:
        certFile: /etc/traefik/certs/dev-wildcard.crt
        keyFile: /etc/traefik/certs/dev-wildcard.key
      # defaultGeneratedCert:
      #   resolver: letsencrypt
      #   domain:
      #     main: trade2026.local
      #     sans:
      #       - "*.trade2026.local"

  # ========================================
  # TLS Options
  # ========================================
  options:
    # Modern TLS configuration (recommended)
    modern:
      minVersion: VersionTLS13
      cipherSuites:
        - TLS_AES_256_GCM_SHA384
        - TLS_AES_128_GCM_SHA256
        - TLS_CHACHA20_POLY1305_SHA256
      curvePreferences:
        - CurveP521
        - CurveP384
      sniStrict: false
      alpnProtocols:
        - h2
        - http/1.1

    # Intermediate TLS (for compatibility)
    intermediate:
      minVersion: VersionTLS12
      maxVersion: VersionTLS13
      cipherSuites:
        # TLS 1.3
        - TLS_AES_256_GCM_SHA384
        - TLS_AES_128_GCM_SHA256
        - TLS_CHACHA20_POLY1305_SHA256
        # TLS 1.2
        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
      curvePreferences:
        - CurveP384
        - CurveP256
      sniStrict: false
      alpnProtocols:
        - h2
        - http/1.1

    # mTLS (mutual TLS) for service-to-service
    mtls:
      minVersion: VersionTLS13
      clientAuth:
        caFiles:
          - /etc/traefik/certs/ca.crt
        clientAuthType: RequireAndVerifyClientCert
      cipherSuites:
        - TLS_AES_256_GCM_SHA384
        - TLS_AES_128_GCM_SHA256
      sniStrict: true

    # Default (fallback)
    default:
      minVersion: VersionTLS12
      sniStrict: false

# ========================================
# HTTP Configuration (TLS-related)
# ========================================
http:
  # Example TLS router (defined in service labels, shown here for reference)
  # routers:
  #   superset-https:
  #     rule: "Host(`superset.local`)"
  #     entryPoints:
  #       - websecure
  #     service: superset
  #     tls:
  #       options: modern
  #       certResolver: letsencrypt  # Or use certificates above
  #     middlewares:
  #       - redirect-https
  #       - secure-headers

# ========================================
# TCP Configuration (for gRPC with TLS)
# ========================================
# tcp:
#   routers:
#     grpc-serving:
#       rule: "HostSNI(`serving.local`)"
#       entryPoints:
#         - grpc
#       service: serving-grpc
#       tls:
#         options: modern
#         passthrough: false  # Terminate TLS at Traefik
#         # passthrough: true  # Pass TLS through to backend
#
#   services:
#     serving-grpc:
#       loadBalancer:
#         servers:
#           - address: "serving:8104"
#         serversTransport: grpc-transport
#
#   serversTransports:
#     grpc-transport:
#       serverName: serving.local
#       insecureSkipVerify: false
#       rootCAs:
#         - /etc/traefik/certs/ca.crt
